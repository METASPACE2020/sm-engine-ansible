---

- name: SM web app instance configuration
  hosts: tag_hostgroup_sm_webserver_aws
  user: ubuntu
  gather_facts: true

  roles:
    - role: common
      become: yes

    - role: postgres
      become: yes

    - role: miniconda

    - role: sm_webapp
      venv: "{{ miniconda_prefix }}"
      conda_env: "{{ miniconda_env.name }}"
  tags: ["web"]


- name: ec2.py module cache cleaning
  hosts: localhost
  connection: local

  tasks:
    - name: Drop cached aws api responses created by ec2.py
      shell: rm ~/.ansible/tmp/*.cache
      when: aws_api_cache_clean


- name: SM spark slave instances configuration
  hosts: tag_hostgroup_sm_slave_aws
  user: ubuntu
  gather_facts: true

  roles:
    - role: common
      become: yes

    - role: sm_spark_slave
      venv: "{{ miniconda_prefix }}"
      conda_env: "{{ miniconda_env.name }}"
      spark_usr_dir: "{{ spark_home }}"
      spark_env_extras:
        SPARK_WORKER_DIR: "/tmp/spark"
        SPARK_LOCAL_DIRS: "/mntb/spark,/mntc/spark"
        PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"
      block_dev_labels: [b, c]
  tags: ["spark"]


- name: SM spark master instance configuration
  hosts: tag_hostgroup_sm_master_aws
  user: ubuntu
  gather_facts: true

  roles:
    - role: common
      become: yes

    - role: sm_spark_master
      venv: "{{ miniconda_prefix }}"
      conda_env: "{{ miniconda_env.name }}"
      spark_usr_dir: "{{ spark_home }}"
      spark_env_extras:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"
  tags: ["spark"]
